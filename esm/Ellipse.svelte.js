import { SvelteComponent, init, safe_not_equal, flush, append_styles, assign, svg_element, set_svg_attributes, toggle_class, insert, get_spread_update, noop, detach, compute_rest_props, component_subscribe, exclude_internal_props } from 'svelte/internal';
import { vec2 } from 'gl-matrix';
import { getScaleContext } from './math.js';

/* src/Ellipse.svelte generated by Svelte v3.42.4 */

function add_css(target) {
	append_styles(target, "svelte-cc8k9r", "ellipse.svelte-cc8k9r{vector-effect:non-scaling-stroke}");
}

function create_fragment(ctx) {
	let ellipse;
	let ellipse_cx_value;
	let ellipse_cy_value;
	let ellipse_rx_value;
	let ellipse_ry_value;
	let ellipse_stroke_dasharray_value;
	let ellipse_transform_value;
	let ellipse_style_value;

	let ellipse_levels = [
		{
			cx: ellipse_cx_value = /*center*/ ctx[0][0]
		},
		{
			cy: ellipse_cy_value = /*center*/ ctx[0][1]
		},
		{
			rx: ellipse_rx_value = Math.abs(/*radius*/ ctx[1][0])
		},
		{
			ry: ellipse_ry_value = Math.abs(/*radius*/ ctx[1][1])
		},
		{ "stroke-width": /*weight*/ ctx[4] },
		{
			"stroke-dasharray": ellipse_stroke_dasharray_value = /*strokeStyle*/ ctx[2] === "dashed" ? "4,3" : undefined
		},
		{
			transform: ellipse_transform_value = `${/*cssScale*/ ctx[8]} ${/*rotate*/ ctx[7]}`
		},
		/*$$restProps*/ ctx[10],
		{
			style: ellipse_style_value = `
    stroke: ${/*color*/ ctx[5]};
    fill: ${/*color*/ ctx[5]};
    fill-opacity: ${/*fillOpacity*/ ctx[6]};
    stroke-opacity: ${/*strokeOpacity*/ ctx[3]};
    ${/*$$restProps*/ ctx[10].style || ""}
  `
		}
	];

	let ellipse_data = {};

	for (let i = 0; i < ellipse_levels.length; i += 1) {
		ellipse_data = assign(ellipse_data, ellipse_levels[i]);
	}

	return {
		c() {
			ellipse = svg_element("ellipse");
			set_svg_attributes(ellipse, ellipse_data);
			toggle_class(ellipse, "svelte-cc8k9r", true);
		},
		m(target, anchor) {
			insert(target, ellipse, anchor);
		},
		p(ctx, [dirty]) {
			set_svg_attributes(ellipse, ellipse_data = get_spread_update(ellipse_levels, [
				dirty & /*center*/ 1 && ellipse_cx_value !== (ellipse_cx_value = /*center*/ ctx[0][0]) && { cx: ellipse_cx_value },
				dirty & /*center*/ 1 && ellipse_cy_value !== (ellipse_cy_value = /*center*/ ctx[0][1]) && { cy: ellipse_cy_value },
				dirty & /*radius*/ 2 && ellipse_rx_value !== (ellipse_rx_value = Math.abs(/*radius*/ ctx[1][0])) && { rx: ellipse_rx_value },
				dirty & /*radius*/ 2 && ellipse_ry_value !== (ellipse_ry_value = Math.abs(/*radius*/ ctx[1][1])) && { ry: ellipse_ry_value },
				dirty & /*weight*/ 16 && { "stroke-width": /*weight*/ ctx[4] },
				dirty & /*strokeStyle*/ 4 && ellipse_stroke_dasharray_value !== (ellipse_stroke_dasharray_value = /*strokeStyle*/ ctx[2] === "dashed" ? "4,3" : undefined) && {
					"stroke-dasharray": ellipse_stroke_dasharray_value
				},
				dirty & /*cssScale, rotate*/ 384 && ellipse_transform_value !== (ellipse_transform_value = `${/*cssScale*/ ctx[8]} ${/*rotate*/ ctx[7]}`) && { transform: ellipse_transform_value },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10],
				dirty & /*color, fillOpacity, strokeOpacity, $$restProps*/ 1128 && ellipse_style_value !== (ellipse_style_value = `
    stroke: ${/*color*/ ctx[5]};
    fill: ${/*color*/ ctx[5]};
    fill-opacity: ${/*fillOpacity*/ ctx[6]};
    stroke-opacity: ${/*strokeOpacity*/ ctx[3]};
    ${/*$$restProps*/ ctx[10].style || ""}
  `) && { style: ellipse_style_value }
			]));

			toggle_class(ellipse, "svelte-cc8k9r", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(ellipse);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let cssScale;
	let rotate;

	const omit_props_names = [
		"center","radius","angle","strokeStyle","strokeOpacity","weight","color","fillOpacity"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $scaleContext;
	let { center = vec2.fromValues(0, 0) } = $$props;
	let { radius = vec2.fromValues(1, 1) } = $$props;
	let { angle = 0 } = $$props;
	let { strokeStyle = "solid" } = $$props;
	let { strokeOpacity = 1.0 } = $$props;
	let { weight = 2 } = $$props;
	let { color = "var(--visual-math-fg)" } = $$props;
	let { fillOpacity = 0.15 } = $$props;
	let scaleContext = getScaleContext();
	component_subscribe($$self, scaleContext, value => $$invalidate(12, $scaleContext = value));

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('center' in $$new_props) $$invalidate(0, center = $$new_props.center);
		if ('radius' in $$new_props) $$invalidate(1, radius = $$new_props.radius);
		if ('angle' in $$new_props) $$invalidate(11, angle = $$new_props.angle);
		if ('strokeStyle' in $$new_props) $$invalidate(2, strokeStyle = $$new_props.strokeStyle);
		if ('strokeOpacity' in $$new_props) $$invalidate(3, strokeOpacity = $$new_props.strokeOpacity);
		if ('weight' in $$new_props) $$invalidate(4, weight = $$new_props.weight);
		if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
		if ('fillOpacity' in $$new_props) $$invalidate(6, fillOpacity = $$new_props.fillOpacity);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$scaleContext*/ 4096) {
			$$invalidate(8, cssScale = $scaleContext.cssScale);
		}

		if ($$self.$$.dirty & /*angle, center*/ 2049) {
			$$invalidate(7, rotate = `rotate(${angle * 180 / Math.PI} ${center[0]} ${center[1]})`);
		}
	};

	return [
		center,
		radius,
		strokeStyle,
		strokeOpacity,
		weight,
		color,
		fillOpacity,
		rotate,
		cssScale,
		scaleContext,
		$$restProps,
		angle,
		$scaleContext
	];
}

class Ellipse extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				center: 0,
				radius: 1,
				angle: 11,
				strokeStyle: 2,
				strokeOpacity: 3,
				weight: 4,
				color: 5,
				fillOpacity: 6
			},
			add_css
		);
	}

	get center() {
		return this.$$.ctx[0];
	}

	set center(center) {
		this.$$set({ center });
		flush();
	}

	get radius() {
		return this.$$.ctx[1];
	}

	set radius(radius) {
		this.$$set({ radius });
		flush();
	}

	get angle() {
		return this.$$.ctx[11];
	}

	set angle(angle) {
		this.$$set({ angle });
		flush();
	}

	get strokeStyle() {
		return this.$$.ctx[2];
	}

	set strokeStyle(strokeStyle) {
		this.$$set({ strokeStyle });
		flush();
	}

	get strokeOpacity() {
		return this.$$.ctx[3];
	}

	set strokeOpacity(strokeOpacity) {
		this.$$set({ strokeOpacity });
		flush();
	}

	get weight() {
		return this.$$.ctx[4];
	}

	set weight(weight) {
		this.$$set({ weight });
		flush();
	}

	get color() {
		return this.$$.ctx[5];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get fillOpacity() {
		return this.$$.ctx[6];
	}

	set fillOpacity(fillOpacity) {
		this.$$set({ fillOpacity });
		flush();
	}
}

export { Ellipse as default };
//# sourceMappingURL=Ellipse.svelte.js.map
