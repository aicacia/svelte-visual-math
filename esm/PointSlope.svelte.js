import { SvelteComponent, init, safe_not_equal, flush, create_component, mount_component, transition_in, transition_out, destroy_component } from 'svelte/internal';
import { vec2 } from 'gl-matrix';
import PointAngle from './PointAngle.svelte.js';

/* src/PointSlope.svelte generated by Svelte v3.42.4 */

function create_fragment(ctx) {
	let pointangle;
	let current;

	pointangle = new PointAngle({
			props: {
				point: /*point*/ ctx[0],
				angle: /*angle*/ ctx[5],
				color: /*color*/ ctx[1],
				opacity: /*opacity*/ ctx[4],
				style: /*style*/ ctx[2],
				weight: /*weight*/ ctx[3]
			}
		});

	return {
		c() {
			create_component(pointangle.$$.fragment);
		},
		m(target, anchor) {
			mount_component(pointangle, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const pointangle_changes = {};
			if (dirty & /*point*/ 1) pointangle_changes.point = /*point*/ ctx[0];
			if (dirty & /*angle*/ 32) pointangle_changes.angle = /*angle*/ ctx[5];
			if (dirty & /*color*/ 2) pointangle_changes.color = /*color*/ ctx[1];
			if (dirty & /*opacity*/ 16) pointangle_changes.opacity = /*opacity*/ ctx[4];
			if (dirty & /*style*/ 4) pointangle_changes.style = /*style*/ ctx[2];
			if (dirty & /*weight*/ 8) pointangle_changes.weight = /*weight*/ ctx[3];
			pointangle.$set(pointangle_changes);
		},
		i(local) {
			if (current) return;
			transition_in(pointangle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pointangle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(pointangle, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { point = vec2.create() } = $$props;
	let { slope = 0 } = $$props;
	let { color = "var(--visual-math-fg)" } = $$props;
	let { style = "solid" } = $$props;
	let { weight = 2 } = $$props;
	let { opacity = 1 } = $$props;
	let angle = Math.atan(slope);

	$$self.$$set = $$props => {
		if ('point' in $$props) $$invalidate(0, point = $$props.point);
		if ('slope' in $$props) $$invalidate(6, slope = $$props.slope);
		if ('color' in $$props) $$invalidate(1, color = $$props.color);
		if ('style' in $$props) $$invalidate(2, style = $$props.style);
		if ('weight' in $$props) $$invalidate(3, weight = $$props.weight);
		if ('opacity' in $$props) $$invalidate(4, opacity = $$props.opacity);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*slope*/ 64) {
			$$invalidate(5, angle = Math.atan(slope));
		}
	};

	return [point, color, style, weight, opacity, angle, slope];
}

class PointSlope extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			point: 0,
			slope: 6,
			color: 1,
			style: 2,
			weight: 3,
			opacity: 4
		});
	}

	get point() {
		return this.$$.ctx[0];
	}

	set point(point) {
		this.$$set({ point });
		flush();
	}

	get slope() {
		return this.$$.ctx[6];
	}

	set slope(slope) {
		this.$$set({ slope });
		flush();
	}

	get color() {
		return this.$$.ctx[1];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get style() {
		return this.$$.ctx[2];
	}

	set style(style) {
		this.$$set({ style });
		flush();
	}

	get weight() {
		return this.$$.ctx[3];
	}

	set weight(weight) {
		this.$$set({ weight });
		flush();
	}

	get opacity() {
		return this.$$.ctx[4];
	}

	set opacity(opacity) {
		this.$$set({ opacity });
		flush();
	}
}

export { PointSlope as default };
//# sourceMappingURL=PointSlope.svelte.js.map
