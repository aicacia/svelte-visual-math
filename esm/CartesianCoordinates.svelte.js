import { SvelteComponent, init, safe_not_equal, flush, append_styles, create_component, mount_component, transition_in, transition_out, destroy_component, svg_element, attr, insert, detach, space, empty, group_outros, check_outros } from 'svelte/internal';
import XLabels from './XLabels.svelte.js';
import YLabels from './YLabels.svelte.js';
import GridPattern from './GridPattern.svelte.js';

/* src/CartesianCoordinates.svelte generated by Svelte v3.42.4 */

function add_css(target) {
	append_styles(target, "svelte-xqsvde", "line.svelte-xqsvde{stroke:var(--visual-math-origin-color)}");
}

// (38:0) {#if xAxis.labels}
function create_if_block_3(ctx) {
	let xlabels;
	let current;

	xlabels = new XLabels({
			props: {
				labelMaker: /*xAxisOptions*/ ctx[3].labels,
				separation: /*xAxisOptions*/ ctx[3].lines || 1
			}
		});

	return {
		c() {
			create_component(xlabels.$$.fragment);
		},
		m(target, anchor) {
			mount_component(xlabels, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const xlabels_changes = {};
			if (dirty & /*xAxisOptions*/ 8) xlabels_changes.labelMaker = /*xAxisOptions*/ ctx[3].labels;
			if (dirty & /*xAxisOptions*/ 8) xlabels_changes.separation = /*xAxisOptions*/ ctx[3].lines || 1;
			xlabels.$set(xlabels_changes);
		},
		i(local) {
			if (current) return;
			transition_in(xlabels.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(xlabels.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(xlabels, detaching);
		}
	};
}

// (44:0) {#if yAxis.labels}
function create_if_block_2(ctx) {
	let ylabels;
	let current;

	ylabels = new YLabels({
			props: {
				labelMaker: /*yAxisOptions*/ ctx[2].labels,
				separation: /*yAxisOptions*/ ctx[2].lines || 1
			}
		});

	return {
		c() {
			create_component(ylabels.$$.fragment);
		},
		m(target, anchor) {
			mount_component(ylabels, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const ylabels_changes = {};
			if (dirty & /*yAxisOptions*/ 4) ylabels_changes.labelMaker = /*yAxisOptions*/ ctx[2].labels;
			if (dirty & /*yAxisOptions*/ 4) ylabels_changes.separation = /*yAxisOptions*/ ctx[2].lines || 1;
			ylabels.$set(ylabels_changes);
		},
		i(local) {
			if (current) return;
			transition_in(ylabels.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(ylabels.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(ylabels, detaching);
		}
	};
}

// (51:0) {#if xAxisOptions.axis}
function create_if_block_1(ctx) {
	let line;
	let line_x__value;
	let line_x__value_1;
	let line_y__value;
	let line_y__value_1;

	return {
		c() {
			line = svg_element("line");
			attr(line, "x1", line_x__value = -10000000);
			attr(line, "x2", line_x__value_1 = 10000000);
			attr(line, "y1", line_y__value = 0);
			attr(line, "y2", line_y__value_1 = 0);
			attr(line, "class", "transform-y-to-center svelte-xqsvde");
		},
		m(target, anchor) {
			insert(target, line, anchor);
		},
		d(detaching) {
			if (detaching) detach(line);
		}
	};
}

// (61:0) {#if yAxisOptions.axis}
function create_if_block(ctx) {
	let line;
	let line_x__value;
	let line_x__value_1;
	let line_y__value;
	let line_y__value_1;

	return {
		c() {
			line = svg_element("line");
			attr(line, "x1", line_x__value = 0);
			attr(line, "x2", line_x__value_1 = 0);
			attr(line, "y1", line_y__value = -10000000);
			attr(line, "y2", line_y__value_1 = 10000000);
			attr(line, "class", "transform-x-to-center svelte-xqsvde");
		},
		m(target, anchor) {
			insert(target, line, anchor);
		},
		d(detaching) {
			if (detaching) detach(line);
		}
	};
}

function create_fragment(ctx) {
	let defs;
	let gridpattern;
	let t0;
	let rect;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block3_anchor;
	let current;

	gridpattern = new GridPattern({
			props: {
				id: /*id*/ ctx[4],
				xLines: /*xAxisOptions*/ ctx[3].lines,
				yLines: /*yAxisOptions*/ ctx[2].lines,
				xSubdivisions: /*xAxisOptions*/ ctx[3].subdivisions,
				ySubdivisions: /*yAxisOptions*/ ctx[2].subdivisions
			}
		});

	let if_block0 = /*xAxis*/ ctx[0].labels && create_if_block_3(ctx);
	let if_block1 = /*yAxis*/ ctx[1].labels && create_if_block_2(ctx);
	let if_block2 = /*xAxisOptions*/ ctx[3].axis && create_if_block_1();
	let if_block3 = /*yAxisOptions*/ ctx[2].axis && create_if_block();

	return {
		c() {
			defs = svg_element("defs");
			create_component(gridpattern.$$.fragment);
			t0 = space();
			rect = svg_element("rect");
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			attr(rect, "fill", `url(#${/*id*/ ctx[4]})`);
			attr(rect, "x", -10000000);
			attr(rect, "y", -10000000);
			attr(rect, "width", 20000000);
			attr(rect, "height", 20000000);
		},
		m(target, anchor) {
			insert(target, defs, anchor);
			mount_component(gridpattern, defs, null);
			insert(target, t0, anchor);
			insert(target, rect, anchor);
			insert(target, t1, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, if_block3_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const gridpattern_changes = {};
			if (dirty & /*xAxisOptions*/ 8) gridpattern_changes.xLines = /*xAxisOptions*/ ctx[3].lines;
			if (dirty & /*yAxisOptions*/ 4) gridpattern_changes.yLines = /*yAxisOptions*/ ctx[2].lines;
			if (dirty & /*xAxisOptions*/ 8) gridpattern_changes.xSubdivisions = /*xAxisOptions*/ ctx[3].subdivisions;
			if (dirty & /*yAxisOptions*/ 4) gridpattern_changes.ySubdivisions = /*yAxisOptions*/ ctx[2].subdivisions;
			gridpattern.$set(gridpattern_changes);

			if (/*xAxis*/ ctx[0].labels) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*xAxis*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t2.parentNode, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*yAxis*/ ctx[1].labels) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*yAxis*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*xAxisOptions*/ ctx[3].axis) {
				if (if_block2) ; else {
					if_block2 = create_if_block_1();
					if_block2.c();
					if_block2.m(t4.parentNode, t4);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*yAxisOptions*/ ctx[2].axis) {
				if (if_block3) ; else {
					if_block3 = create_if_block();
					if_block3.c();
					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(gridpattern.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(gridpattern.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(defs);
			destroy_component(gridpattern);
			if (detaching) detach(t0);
			if (detaching) detach(rect);
			if (detaching) detach(t1);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t3);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(if_block3_anchor);
		}
	};
}

let incrementer = 0;
const defaultAxisOptions = { axis: true, lines: 1, labels: x => x };

function instance($$self, $$props, $$invalidate) {
	let xAxisOptions;
	let yAxisOptions;
	let { subdivisions = false } = $$props;
	let { xAxis = Object.assign({ subdivisions }, defaultAxisOptions) } = $$props;
	let { yAxis = Object.assign({ subdivisions }, defaultAxisOptions) } = $$props;
	const id = `visual-math-grid-${incrementer++}`;

	$$self.$$set = $$props => {
		if ('subdivisions' in $$props) $$invalidate(5, subdivisions = $$props.subdivisions);
		if ('xAxis' in $$props) $$invalidate(0, xAxis = $$props.xAxis);
		if ('yAxis' in $$props) $$invalidate(1, yAxis = $$props.yAxis);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*subdivisions, xAxis*/ 33) {
			$$invalidate(3, xAxisOptions = Object.assign(Object.assign({ subdivisions }, defaultAxisOptions), xAxis));
		}

		if ($$self.$$.dirty & /*subdivisions, yAxis*/ 34) {
			$$invalidate(2, yAxisOptions = Object.assign(Object.assign({ subdivisions }, defaultAxisOptions), yAxis));
		}
	};

	return [xAxis, yAxis, yAxisOptions, xAxisOptions, id, subdivisions];
}

class CartesianCoordinates extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { subdivisions: 5, xAxis: 0, yAxis: 1 }, add_css);
	}

	get subdivisions() {
		return this.$$.ctx[5];
	}

	set subdivisions(subdivisions) {
		this.$$set({ subdivisions });
		flush();
	}

	get xAxis() {
		return this.$$.ctx[0];
	}

	set xAxis(xAxis) {
		this.$$set({ xAxis });
		flush();
	}

	get yAxis() {
		return this.$$.ctx[1];
	}

	set yAxis(yAxis) {
		this.$$set({ yAxis });
		flush();
	}
}

export { CartesianCoordinates as default };
//# sourceMappingURL=CartesianCoordinates.svelte.js.map
