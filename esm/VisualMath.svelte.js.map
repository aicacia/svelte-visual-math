{"version":3,"file":"VisualMath.svelte.js","sources":["../src/VisualMath.svelte"],"sourcesContent":["<script lang=\"ts\" context=\"module\">\n  const VEC2_0 = vec2.create();\n\n  function getMouseWheelDirection(e: any) {\n    if (typeof e.detail == \"number\" && e.detail !== 0) {\n      if (e.detail > 0) {\n        return -1;\n      } else if (e.detail < 0) {\n        return 1;\n      }\n    } else if (typeof e.wheelDelta === \"number\") {\n      if (e.wheelDelta < 0) {\n        return -1;\n      } else if (e.wheelDelta > 0) {\n        return 1;\n      }\n    }\n    return undefined;\n  }\n</script>\n\n<script lang=\"ts\">\n  import type { FullGestureState } from \"@use-gesture/vanilla\";\n  import { DragGesture, WheelGesture } from \"@use-gesture/vanilla\";\n  import { range } from \"@aicacia/core\";\n  import { vec2, mat2d } from \"gl-matrix\";\n  import {\n    setCoordinateContext,\n    setMapContext,\n    setPanesContext,\n    setScaleContext,\n  } from \"./math\";\n  import { writable } from \"svelte/store\";\n  import { onMount } from \"svelte\";\n\n  export let width: string | number = 500;\n  export let height: string | number = 500;\n  export let pan = true;\n  export let zoom = true;\n  export let xAxisExtent: vec2 = vec2.fromValues(-5.5, 5.5);\n  export let yAxisExtent: vec2 = vec2.fromValues(-5.5, 5.5);\n\n  let actualWidth: number = typeof width === \"number\" ? width : 500;\n  let actualHeight: number = typeof height === \"number\" ? height : 500;\n  $: desiredCssWidth = width === \"auto\" ? \"100%\" : `${width}px`;\n  $: desiredCssHeight = height === \"auto\" ? \"100%\" : `${height}px`;\n\n  $: {\n    const aspect = actualWidth / actualHeight,\n      halfZoomAmount = zoomAmount * 0.5,\n      newZoomAmount = zoomAmount * aspect,\n      halfNewZoomAmount = newZoomAmount * 0.5;\n\n    xAxisExtent[0] = -halfNewZoomAmount;\n    xAxisExtent[1] = halfNewZoomAmount;\n    yAxisExtent[0] = -halfZoomAmount;\n    yAxisExtent[1] = halfZoomAmount;\n  }\n\n  let zoomAmount = Math.min(\n    xAxisExtent[1] - xAxisExtent[0],\n    yAxisExtent[1] - yAxisExtent[0]\n  );\n\n  let offset = vec2.fromValues(0, 0);\n  let min = vec2.fromValues(xAxisExtent[0], yAxisExtent[0]);\n  let max = vec2.fromValues(xAxisExtent[1], yAxisExtent[1]);\n\n  $: min = vec2.add(\n    min,\n    offset,\n    vec2.set(VEC2_0, xAxisExtent[0], yAxisExtent[0])\n  );\n  $: max = vec2.add(\n    max,\n    offset,\n    vec2.set(VEC2_0, xAxisExtent[1], yAxisExtent[1])\n  );\n\n  $: mapX = (x: number) => ((x - min[0]) / (max[0] - min[0])) * actualWidth;\n  $: mapY = (y: number) => ((y - min[1]) / (max[1] - min[1])) * actualHeight;\n\n  let span = vec2.create();\n  $: span = vec2.sub(span, max, min);\n\n  $: scaleX = (x: number) => (x / span[0]) * actualWidth;\n  $: scaleY = (y: number) => (-y / span[1]) * actualHeight;\n  $: unscaleX = (x: number) => (x / actualWidth) * xSpan;\n  $: unscaleY = (y: number) => (-y / actualHeight) * ySpan;\n\n  let pixelMatrix = mat2d.create();\n  $: pixelMatrix = mat2d.fromScaling(\n    pixelMatrix,\n    vec2.set(VEC2_0, scaleX(1), scaleY(1))\n  );\n\n  let inversePixelMatrix = mat2d.create();\n  $: inversePixelMatrix = mat2d.fromScaling(\n    inversePixelMatrix,\n    vec2.set(VEC2_0, unscaleX(1), unscaleY(1))\n  );\n\n  $: cssScale = `scale(${scaleX(1)} ${scaleY(1)})`;\n\n  let base = 2;\n  let xPanes: vec2[] = [];\n  let yPanes: vec2[] = [];\n  let xPaneRange = vec2.create();\n  let yPaneRange = vec2.create();\n\n  $: xSpan = max[0] - min[0];\n  $: xStep = Math.pow(base, Math.round(Math.log10(xSpan) / Math.log10(base)));\n  $: xLowerBound = Math.floor(min[0] / xStep) * xStep;\n  $: xUpperBound = Math.ceil(max[0] / xStep) * xStep;\n  $: xPanes = range(xLowerBound, xUpperBound, xStep)\n    .iter()\n    .map((xMin) => vec2.fromValues(xMin, xMin + xStep))\n    .toArray();\n  $: xPaneRange = vec2.set(xPaneRange, xLowerBound, xUpperBound);\n\n  $: ySpan = max[1] - min[1];\n  $: yStep = Math.pow(base, Math.round(Math.log10(ySpan) / Math.log10(base)));\n  $: yLowerBound = Math.floor(min[0] / yStep) * yStep;\n  $: yUpperBound = Math.ceil(max[0] / yStep) * yStep;\n  $: yPanes = range(yLowerBound, yUpperBound, yStep)\n    .iter()\n    .map((yMin) => vec2.fromValues(yMin, yMin + yStep))\n    .toArray();\n  $: yPaneRange = vec2.set(yPaneRange, yLowerBound, yUpperBound);\n\n  let panesContext = writable({\n    xPanes,\n    yPanes,\n    xPaneRange,\n    yPaneRange,\n  });\n  setPanesContext(panesContext);\n\n  $: panesContext.set({\n    xPanes,\n    yPanes,\n    xPaneRange,\n    yPaneRange,\n  });\n\n  let coordinateContext = writable({\n    min,\n    max,\n    width: actualWidth,\n    height: actualHeight,\n  });\n  setCoordinateContext(coordinateContext);\n  $: coordinateContext.set({\n    min,\n    max,\n    width: actualWidth,\n    height: actualHeight,\n  });\n\n  let scaleContext = writable({\n    zoomAmount,\n    scaleX,\n    scaleY,\n    span,\n    pixelMatrix,\n    inversePixelMatrix,\n    cssScale,\n  });\n  setScaleContext(scaleContext);\n  $: scaleContext.set({\n    zoomAmount,\n    scaleX,\n    scaleY,\n    span,\n    pixelMatrix,\n    inversePixelMatrix,\n    cssScale,\n  });\n\n  let mapContext = writable({\n    mapX,\n    mapY,\n  });\n  setMapContext(mapContext);\n  $: mapContext.set({\n    mapX,\n    mapY,\n  });\n\n  let element: HTMLDivElement;\n\n  $: onDrag = (\n    state: Omit<FullGestureState<\"drag\">, \"event\"> & {\n      event: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent;\n    }\n  ) => {\n    if (!pan) {\n      return;\n    }\n    offset[0] =\n      (-state.offset[0] / actualWidth) * (xAxisExtent[1] - xAxisExtent[0]);\n    offset[1] =\n      (-state.offset[1] / actualHeight) * (yAxisExtent[1] - yAxisExtent[0]);\n  };\n\n  $: onMouseWheel = (\n    state: Omit<FullGestureState<\"wheel\">, \"event\"> & {\n      event: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent;\n    }\n  ) => {\n    if (!zoom || state.last) {\n      return;\n    }\n    const wheelDirection = getMouseWheelDirection(state.event as WheelEvent);\n\n    if (wheelDirection && (zoomAmount > 3 || wheelDirection < 0)) {\n      xAxisExtent = vec2.set(\n        xAxisExtent,\n        xAxisExtent[0] + wheelDirection,\n        xAxisExtent[1] - wheelDirection\n      );\n      yAxisExtent = vec2.set(\n        yAxisExtent,\n        yAxisExtent[0] + wheelDirection,\n        yAxisExtent[1] - wheelDirection\n      );\n      zoomAmount = Math.min(\n        xAxisExtent[1] - xAxisExtent[0],\n        yAxisExtent[1] - yAxisExtent[0]\n      );\n    }\n  };\n\n  onMount(() => {\n    const dragGesture = new DragGesture(element, onDrag),\n      wheelGesture = new WheelGesture(element, onMouseWheel);\n\n    return () => {\n      dragGesture.destroy();\n      wheelGesture.destroy();\n    };\n  });\n</script>\n\n<div\n  bind:this={element}\n  bind:offsetWidth={actualWidth}\n  bind:offsetHeight={actualHeight}\n  class=\"visual-math\"\n  style={`width: ${desiredCssWidth}; height: ${desiredCssHeight}`}\n>\n  <svg\n    width={actualWidth}\n    height={actualHeight}\n    viewBox={`${-mapX(0)} ${-mapY(0)} ${actualWidth} ${actualHeight}`}\n    preserveAspectRatio=\"xMidYMin\"\n    style={`width: ${width}; touch-action: ${pan ? \"none\" : \"auto\"};`}\n  >\n    <slot />\n  </svg>\n</div>\n\n<style>\n  .visual-math {\n    display: block;\n    background: var(--visual-math-bg);\n    overflow: hidden;\n    user-select: none;\n    font-family: sans-serif;\n    font-variant-numeric: tabular-nums;\n\n    --visual-math-bg: #f1f1f1;\n    --visual-math-fg: black;\n\n    --visual-math-origin-color: var(--visual-math-fg);\n    --visual-math-line-color: #555;\n    --grid-line-subdivision-color: #222;\n\n    --visual-math-red: #f10000;\n    --visual-math-orange: #f18100;\n    --visual-math-yellow: #f1f100;\n    --visual-math-green: #00f181;\n    --visual-math-blue: #0000f1;\n    --visual-math-indigo: #8100f1;\n    --visual-math-violet: #8100f1;\n    --visual-math-pink: #f18181;\n  }\n\n  .visual-math text {\n    fill: var(--visual-math-fg);\n    cursor: default;\n  }\n\n  .visual-math path {\n    stroke: var(--visual-math-fg);\n  }\n\n  .visual-math .draggable {\n    transition: r 0.2s ease, stroke-width 0.2s ease;\n    stroke-width: 1rem;\n    cursor: grab;\n    outline: 0 !important;\n\n    color: hsl(0, 100%, 47%);\n  }\n\n  .visual-math .draggable:active {\n    cursor: grabbing;\n  }\n\n  .visual-math .draggable:focus,\n  .visual-math circle.draggable:hover,\n  .visual-math circle.draggable.dragging {\n    r: 0.9rem;\n    stroke-width: 0;\n  }\n</style>\n"],"names":[],"mappings":"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"}